---
description: 
globs: 
alwaysApply: true
---
---
name: "Python Best Practices for Dataset Forge"
description: "Enforce Python best practices for clean, efficient, and idiomatic code generation in Dataset Forge"
globs: ["**/*.py"]
alwaysApply: true
priority: 1
---

# Python Best Practices for Dataset Forge

You are an AI assistant specialized in Python development for Dataset Forge. Your approach emphasizes:

## Core Principles

- **Clear project structure** with separate directories for source code, tests, docs, and config
- **Modular design** with distinct files for models, services, controllers, and utilities
- **Configuration management** using environment variables
- **Robust error handling** and logging, including context capture
- **Comprehensive testing** with pytest
- **Detailed documentation** using docstrings and README files
- **Dependency management** via virtual environments
- **Code style consistency** using project standards

## Critical Requirements

### Type Annotations & Documentation
- **ALWAYS** add typing annotations to each function or class
- **ALWAYS** include return types when necessary
- **ALWAYS** add descriptive docstrings to all Python functions and classes
- **ALWAYS** use Google-style docstrings (PEP257convention)
- **ALWAYS** update existing docstrings if needed

### Code Preservation
- **ALWAYS** keep any existing comments in files
- **NEVER** remove or modify existing comments without explicit permission

### Testing Standards
- **ONLY** use pytest or pytest plugins, **NEVER** use the unittest module
- **ALWAYS** place tests in `./tests/` directory
- **ALWAYS** create necessary `__init__.py` files if they don't exist
- **ALWAYS** include typing annotations in tests
- **ALWAYS** include docstrings in tests

### Test Imports
When writing tests, always import the following if TYPE_CHECKING:
```python
from _pytest.capture import CaptureFixture
from _pytest.fixtures import FixtureRequest
from _pytest.logging import LogCaptureFixture
from _pytest.monkeypatch import MonkeyPatch
from pytest_mock.plugin import MockerFixture
```

## Dataset Forge Specific Requirements

### Virtual Environment
- **ALWAYS** activate virtual environment before testing: `venv312Scripts\activate`
- **ALWAYS** ensure all dependencies are available in the correct Python environment

### Documentation Updates
- **ALWAYS** update README.md appropriately when adding new functions or features
- **ALWAYS** update documentation for new menu items
- **ONLY** update documentation after confirmation from the user

### Package Documentation
- **ALWAYS** look up documentation for packages, modules, or software added to the project

## Code Quality Standards

### Import Organization
1. Standard library imports
2. Third-party imports  
3l imports (dataset_forge.*)
4. Relative imports (if within same module)

### Import Patterns
- **ALWAYS** use absolute imports for dataset_forge modules:
  - ✅ CORRECT: `from dataset_forge.utils.memory_utils import clear_memory`
  - ❌ WRONG: `from ..utils.memory_utils import clear_memory`

### Error Handling
- Use try-except blocks with meaningful error messages
- Provide graceful degradation for non-critical errors
- All user-facing errors must trigger the error sound via centralized print_error utility

### Performance Considerations
- Use lazy imports for heavy operations
- Implement proper memory management
- Use parallel processing where appropriate
- Cache expensive computations

## AI-Friendly Coding Practices

- Provide code snippets and explanations tailored to these principles
- Optimize for clarity and AI-assisted development
- Use consistent naming conventions (snake_case for variables/functions, PascalCase for classes)
- Follow PEP 8 guidelines with 4-space indentation
- Keep line length under 88 characters (Black formatter standard)



