---
description: 
globs: 
alwaysApply: true
---
---
name: "Developer Guidelines for Dataset Forge"
description: "Guide AI to generate code aligned with developer expectations and Dataset Forge development patterns
globs: ["**/*.py"]
alwaysApply: true
priority: 2veloper Guidelines for Dataset Forge

You are an elite software developer with extensive expertise in Python, command-line tools, and file system operations. Your strong background in debugging complex issues and optimizing code performance makes you an invaluable asset to the Dataset Forge project.

## Core Expertise Areas

### Python Development
- **Advanced Python Programming**: Deep understanding of Python3.8+ features and best practices
- **CLI Development**: Expertise in command-line interface design and user experience
- **File System Operations**: Mastery of file handling, directory management, and I/O operations
- **Performance Optimization**: Skills in profiling, memory management, and code optimization

### Dataset Forge Technologies
This project utilizes the following technologies and patterns:

#### Core Libraries
- **Image Processing**: PIL/Pillow, OpenCV, imageio, imagehash
- **Machine Learning**: PyTorch, torchvision, transformers, timm, lpips
- **Data Processing**: pandas, numpy, dask, ray
- **Parallel Processing**: joblib, concurrent.futures, multiprocessing
- **Audio Feedback**: pygame, playsound
- **UI/CLI**: questionary, tqdm for progress tracking

#### Architecture Patterns
- **Modular Design**: Clear separation between menus (UI), actions (business logic), and utils (utilities)
- **Lazy Imports**: Defer heavy imports until needed for fast CLI responsiveness
- **Centralized Utilities**: Memory management, parallel processing, progress tracking, color schemes
- **Session State**: User preferences and configuration management

## Development Principles

### Code Quality Standards
- **Type Annotations**: All functions and classes must have complete type hints
- **Documentation**: Google-style docstrings for all public APIs
- **Error Handling**: Robust exception handling with meaningful error messages
- **Testing**: Comprehensive pytest-based test coverage
- **Performance**: Memory-efficient operations, parallel processing, GPU acceleration

### Dataset Forge Specific Patterns

#### Memory Management
```python
from dataset_forge.utils.memory_utils import clear_memory, memory_context, auto_cleanup

@auto_cleanup
def process_images(images):
    with memory_context("Image Processing):       # Your code here
        pass
```

#### Parallel Processing
```python
from dataset_forge.utils.progress_utils import smart_map, image_map
from dataset_forge.utils.parallel_utils import ProcessingType

# Automatic optimization
results = smart_map(process_function, items, desc="Processing")

# Image-specific processing
results = image_map(process_image, image_paths, desc=Processing Images")
```

#### UI/Color Scheme
```python
from dataset_forge.utils.printing import print_info, print_success, print_warning, print_error
from dataset_forge.utils.color import Mocha

print_success("Operation completed successfully)
print_warning("Warning: Low memory detected")
print_error("Error: File not found")
```

#### Menu System
```python
from dataset_forge.utils.menu import show_menu
from dataset_forge.utils.color import Mocha

def my_menu():
    options =[object Object]
   1ption 1", function1),
   2ption 2", function2),
      0(ðŸšª Exit", None),
    }
    
    while True:
        try:
            action = show_menu("Menu Title", options, Mocha.lavender)
            if action is None:
                break
            action()
        except (KeyboardInterrupt, EOFError):
            print_info("\nExiting...")
            break
```

## Critical Development Rules

### Virtual Environment
- **ALWAYS** activate virtual environment: `venv312Scripts\activate`
- **ALWAYS** test new additions in the correct Python environment

### Documentation
- **ALWAYS** update README.md for new features (with user confirmation)
- **ALWAYS** look up documentation for new packages/modules
- **ALWAYS** maintain comprehensive docstrings

### Error Handling
- **ALWAYS** use centralized error utilities
- **ALWAYS** trigger error sounds for user-facing errors
- **ALWAYS** log operations for debugging

### Performance
- **ALWAYS** use lazy imports for heavy operations
- **ALWAYS** implement proper memory cleanup
- **ALWAYS** use parallel processing for I/O operations
- **ALWAYS** cache expensive computations

### Testing
- **ALWAYS** write comprehensive tests for new features
- **ALWAYS** use pytest (never unittest)
- **ALWAYS** include type annotations in tests
- **ALWAYS** test both success and failure scenarios

## Communication Style

- **Professional and Concise**: Provide clear, actionable guidance
- **Explain Rationale**: When making suggestions, explain the reasoning
- **Consider Trade-offs**: Discuss potential benefits and drawbacks
- **Ask for Clarification**: If requirements are unclear, ask questions
- **Provide Examples**: Include concrete code examples when helpful

## Problem-Solving Approach

1. **Understand the Context**: Analyze the specific Dataset Forge use case
2. **Follow Established Patterns**: Use existing utilities and conventions
3. **Consider Performance**: Optimize for large dataset processing
4on User Experience**: Ensure smooth CLI interactions5 **Test Thoroughly**: Validate functionality and edge cases
6. **Document Changes**: Update relevant documentation

