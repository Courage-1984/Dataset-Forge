---
description: 
globs: 
alwaysApply: false
---
---
name: "How-to Documentation for Dataset Forge"
description: Structure and write clear how-to documentation for Dataset Forge features
globs: ["docs/**/*.md,docs/**/*.rst"]
alwaysApply: false
priority: 2
---

# How-to Documentation for Dataset Forge

## Documentation Structure

### File Organization
```
docs/
‚îú‚îÄ‚îÄ README.md              # Landing page with navigation
‚îú‚îÄ‚îÄ features.md            # Feature list and workflows
‚îú‚îÄ‚îÄ usage.md               # Step-by-step usage guides
‚îú‚îÄ‚îÄ advanced.md            # Advanced features and configuration
‚îú‚îÄ‚îÄ architecture.md        # Project structure and design
‚îú‚îÄ‚îÄ style_guide.md         # Coding standards and conventions
‚îú‚îÄ‚îÄ troubleshooting.md     # Common issues and solutions
‚îú‚îÄ‚îÄ contributing.md        # Contribution guidelines
‚îú‚îÄ‚îÄ faq.md                 # Frequently asked questions
‚îú‚îÄ‚îÄ changelog.md           # Version history and changes
‚îú‚îÄ‚îÄ license.md             # License information
‚îú‚îÄ‚îÄ README_full.md         # Auto-generated comprehensive docs
‚îî‚îÄ‚îÄ toc.md                 # Auto-generated table of contents
```

### Navigation Pattern
Every documentation file should start with navigation links:

```markdown
# Feature Name

[‚Üê Back to Features](features.md) | [‚Üê Back to Usage](usage.md) | [‚Üê Back to README](../README.md)

---

## Overview

Brief description of the feature and its purpose.

## Prerequisites

- Required dependencies
- System requirements
- Configuration needed

## Step-by-Step Guide

### Step 1: Preparation
Detailed instructions for the first step.

### Step2tion
Configuration steps with examples.

### Step 3: Execution
How to run or use the feature.

### Step 4: Verification
How to verify the feature is working correctly.

## Examples

### Basic Usage
```python
# Code example for basic usage
from dataset_forge.utils.example import example_function

result = example_function(input_data)
```

### Advanced Usage
```python
# Code example for advanced usage
from dataset_forge.utils.example import advanced_function

result = advanced_function(input_data, options=options)
```

## Troubleshooting

### Common Issues
- **Issue 1**: Description and solution
- **Issue 2**: Description and solution

### Error Messages
- `Error: message` - Explanation and resolution

## Related Documentation

- [Related Feature](related_feature.md)
- [Configuration Guide](configuration.md)
- Troubleshooting](troubleshooting.md)
```

## Writing Guidelines

### Content Structure
1. **Clear Title**: Descriptive and specific
2. **Overview**: What the feature does and why it's useful
3**Prerequisites**: What users need before starting4-Step Instructions**: Clear, numbered steps
5. **Examples**: Practical code examples
6. **Troubleshooting**: Common issues and solutions
7**Related Links**: Cross-references to other documentation

### Code Examples
```markdown
### Example: Basic Image Processing
```python
from dataset_forge.utils.image_ops import process_image
from dataset_forge.utils.printing import print_success

# Process a single image
result = process_image(path/to/image.jpg)
print_success(f"Processed image: {result}")
```

### Example: Batch Processing
```python
from dataset_forge.utils.progress_utils import image_map

# Process multiple images
image_paths = ["img1.jpg",img2.jpg", "img3.jpg]
results = image_map(process_image, image_paths, desc=Processing Images")
```
```

### Command Examples
```markdown
### CLI Usage
```bash
# Basic command
dataset-forge

# With specific menu
dataset-forge --menu "Dataset Management"

# With configuration
dataset-forge --config configs/my_config.json
```
```

## Documentation Standards

### Markdown Formatting
- **Headers**: Use `#` for main title, `##` for sections, `###` for subsections
- **Code Blocks**: Use triple backticks with language specification
- **Inline Code**: Use single backticks for `function_names` and `file_paths`
- **Lists**: Use `-` for unordered lists, `1.` for ordered lists
- **Links**: Use `[text](url)` format for internal and external links
- **Bold**: Use `**text**` for emphasis and important information

### Language and Tone
- **Clear and Concise**: Use simple, direct language
- **Action-Oriented**: Start sentences with verbs when giving instructions
- **Consistent Terminology**: Use the same terms throughout
- **User-Focused**: Write from the user's perspective
- **Professional**: Maintain a professional but approachable tone

### Technical Accuracy
- **Test All Examples**: Ensure all code examples work
- **Verify Commands**: Test all command-line examples
- **Update Regularly**: Keep documentation current with code changes
- **Version Information**: Include version requirements where relevant

## Dataset Forge Specific Patterns

### Feature Documentation Template
```markdown
# üéØ Feature Name

[‚Üê Back to Features](features.md) | [‚Üê Back to Usage](usage.md) | [‚Üê Back to README](../README.md)

---

## Overview

Brief description of what this feature does and its benefits.

## Prerequisites

- Python 3.8+
- Required dependencies (see [Installation](special_installation.md))
- Virtual environment activated: `venv312cripts\activate`

## Quick Start

1. **Access the Feature**: Navigate to the appropriate menu
2. **Configure Settings**: Set up any required parameters
3. **Run the Operation**: Execute the feature
4. **Review Results**: Check the output and results

## Detailed Usage

### Step 1: Menu Navigation
Describe how to find and access the feature.

### Step2figuration
Explain any configuration options and their effects.

### Step 3: Execution
Provide detailed execution steps with examples.

### Step 4sults
Explain what to expect and how to interpret results.

## Examples

### Basic Example
```python
# Basic usage example
from dataset_forge.actions.example_actions import example_function

result = example_function(input_path)
```

### Advanced Example
```python
# Advanced usage with options
from dataset_forge.actions.example_actions import advanced_function

result = advanced_function(
    input_path,
    options=[object Object]      quality:high,
      format": "png"
    }
)
```

## Configuration Options

| Option | Type | Default | Description |
|--------|------|---------|-------------|
| `option1` | string | `"default"` | Description of option |
| `option2100` | Description of option |

## Troubleshooting

### Common Issues

**Issue**: Description of the problem
- **Cause**: What causes this issue
- **Solution**: How to fix it

**Issue**: Another common problem
- **Cause**: Root cause
- **Solution**: Resolution steps

### Error Messages

- `Error: File not found` - The specified file doesnt exist
- `Error: Invalid format` - The file format is not supported

## Performance Considerations

- **Memory Usage**: How much memory the feature uses
- **Processing Time**: Expected processing time for different dataset sizes
- **Optimization Tips**: How to optimize performance

## Related Features

- [Related Feature 1](related_feature1.md)
- [Related Feature 2](related_feature2.md)
- [Configuration Guide](configuration.md)

## Technical Details

### Implementation
Brief technical overview of how the feature works.

### Dependencies
List of key dependencies and their purposes.

### Limitations
Any known limitations or constraints.
```

### Menu Documentation Pattern
```markdown
# üìÇ Menu Name

[‚Üê Back to Main Menu](../README.md) | [‚Üê Back to Features](features.md)

---

## Overview

Description of what this menu provides and its purpose.

## Menu Options

###1. üìÅ Option One
**Purpose**: What this option does
**Usage**: How to use it
**Example**: Example usage or output

###2. üîç Option Two
**Purpose**: What this option does
**Usage**: How to use it
**Example**: Example usage or output

### 0üö™ Exit
Returns to the previous menu.

## Workflow Examples

### Example Workflow 1
1. Select option 1
2. Configure parameters
3. Execute operation4. Review results

### Example Workflow 2
1. Select option 2
2. Follow prompts
3. Complete operation4. Check output

## Tips and Best Practices

- **Tip 1**: Helpful advice for users
- **Tip 2**: Another useful tip
- **Best Practice**: Recommended approach

## Troubleshooting

### Common Issues
- **Issue**: Description and solution
- **Issue**: Description and solution

## Related Documentation

- [Related Menu](related_menu.md)
- [Configuration](configuration.md)
- Troubleshooting](troubleshooting.md)
```

## Maintenance Guidelines

### Documentation Updates
- **Code Changes**: Update docs when code changes
- **New Features**: Document all new features
- **Bug Fixes**: Update troubleshooting sections
- **Version Updates**: Update version requirements

### Quality Assurance
- **Review Process**: Have documentation reviewed
- **User Feedback**: Incorporate user feedback
- **Regular Audits**: Periodically review all documentation
- **Link Validation**: Check that all links work

### Automation
- **Auto-Generation**: Use tools to generate comprehensive docs
- **Link Checking**: Automate link validation
- **Format Checking**: Use linters for markdown formatting
- **Version Tracking**: Track documentation versions with code

## Communication and Problem-Solving

- **Clear Instructions**: Provide step-by-step guidance
- **User Feedback**: Include common user questions
- **Error Resolution**: Provide clear error solutions
- **Progressive Disclosure**: Start simple, add complexity

## Code Quality and Best Practices

- **Consistent Formatting**: Follow established markdown patterns
- **Clear Examples**: Provide working code examples
- **Proper Linking**: Use consistent link patterns
- **Version Control**: Track documentation changes

## Semantic Naming and Abstractions

- **Descriptive Titles**: Use clear, descriptive titles
- **Consistent Terminology**: Use consistent terms throughout
- **Logical Organization**: Organize content logically
- **User-Centric Language**: Write from user perspective

## Platform Thinking

- **Cross-Platform**: Ensure compatibility across platforms
- **Accessibility**: Make documentation accessible
- **Scalability**: Design for documentation growth
- **Maintainability**: Focus on long-term maintenance

## Response Format

- **Clear Structure**: Organize with clear headings
- **Practical Examples**: Include working examples
- **Step-by-Step**: Provide detailed instructions
- **Troubleshooting**: Include common issues and solutions

## Handling Uncertainty and Limitations

- **Graceful Degradation**: Handle missing information
- **Fallback Options**: Provide alternative approaches
- **User Communication**: Clearly communicate limitations
- **Continuous Improvement**: Iterate based on feedback